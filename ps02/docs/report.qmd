---
title: "K-mer Sequence Assembler"
subtitle: "CS516 Bioinformatics - Project 2"
author: "Israel Gonzalez S., Gabriel Romero"
date: "February 27, 2023"
toc: true
format:
  html:
    html-math-method: katex
    css: styles.css
    code-tools: true
    self-contained: true
execute:
  warning: false
---
# Abstract
In this project, we assemble input DNA k-mers to an output sequence, such that the assembled sequence has the same k-composition with the true unknown sequence. Also, it implements the de Bruijn graph to represent k-mers and then find a Eulerian path from the graph. For this, the project implements a hash function to match the prefix and suffix of a k-mer to those of other k-mers, implement de Bruijn graph construction to represent k-mers by a directed graph, and implement a Eulerian cycle finding algorithm to find a cycle on a directed graph.

# Introduction
Assembling genomes is a critical task in bioinformatics, as it allows researchers to study the genetic material of various organisms, including humans, animals, and plants. High-throughput sequencing technologies such as Illumina, Ion Torrent, and Pacific Biosciences generate massive amounts of short reads that need to be assembled into longer contiguous sequences (contigs). The de Bruijn graph approach is a widely used method for genome assembly that is based on constructing a graph where the nodes correspond to k-mers (substrings of length k) present in the reads, and the edges represent the overlaps between the k-mers. By traversing the graph using Eulerian cycles or paths, we can reconstruct the original sequence of the genome.

The advantage of using the de Bruijn graph approach is that it can handle large amounts of data efficiently and accurately, even for genomes with repetitive regions that are difficult to assemble using other methods. The approach also allows for the detection of genomic variations, such as single nucleotide polymorphisms (SNPs) and structural variations (SVs), by comparing the assembled genome to a reference genome or other assembled genomes.

Overall, the de Bruijn graph approach, coupled with the use of Eulerian cycles or paths, has revolutionized the field of genome assembly and has enabled researchers to study the genetics of a wide range of organisms with unprecedented accuracy and speed.

# Methods

We proceed in this section to describe the methods we have implemented in Python to emulate the skeleton code provided by Dr. Song, and the way they can be used in an executable Python file `main.py`

## Data structures and algorithms

```python

from test import test_seq_assembly

if __name__ == '__main__':
  test_seq_assembly()

```
This is the main file that calls the execution of tests.

```python


import sys
from timeit import default_timer as timer
from DiGraph import DiGraph
from sequence import random_DNA_sequence, get_kmers, compare_composition
from deBrujinByString import create_deBruijn_graph_by_string_comp
from deBrujinByHash import create_deBruijn_graph_by_hashing
from EulerPath import has_Eulerian_path, find_Eulerian_path
from k_assembler import build_sequence,assemble_kmers
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

def test_and_print_message(seq, seq_truth, k, message):
  if seq == seq_truth:
    msg = "Passed " + message + " (assembled original sequence). Congratulations!"
    print("\033[32m{}\033[0m".format(msg))
  elif compare_composition(seq, seq_truth, k):
    msg = "Passed " + message + " (assembled a sequence of the same composition with the original sequence). Congratulations!"
    print("\033[32m{}\033[0m".format(msg))
  else:
    sys.stderr.write("\033[31m{}\033[0m".format("FAILED test!\n"))

def test_1(method):
  print("\033[33m{}\033[0m".format("Test 1"))
  print("\033[33m{}\033[0m".format("======"))
  print(f"Testing k-assembler by {method}")
  
  # Testing sequences:
  seqs_truth = [
    "aaaaaaaaaaa",
    "agcagctcagc",
    "agcagctcagg",
    random_DNA_sequence(10000, 20000)
  ]
  
  # The value of k for k-mers to be used for each test sequence:
  ks = [5, 3, 3, 20]
  
  for i in range(len(seqs_truth)):
    print(f"\nExample {i}:")
    
    seq_truth = seqs_truth[i]
    k = ks[i]
    kmers = get_kmers(seq_truth, k, True)
    g = DiGraph()

    begin = timer()
    if method == "k-mer pairwise comparison":
      g = create_deBruijn_graph_by_string_comp(kmers, g)
    elif method == "k-mer hashing":
      g = create_deBruijn_graph_by_hashing(kmers, g)
    else:
      sys.stderr.write("ERROR: unknown method!\n")
      return
    end = timer()
    elapsed_secs = round((end - begin) * 1000, 3)

    print(f"Elapsed time for building de Bruijn graph: {elapsed_secs}")
    
    if has_Eulerian_path(g):
      print("\033[32m{}\033[0m".format("Passed test for existence of Eulerian path. Congratulations!"))
    else:
      print("\033[31m{}\033[0m".format("Failed test for existence of Eulerian path!"))
    
    try:
      path = find_Eulerian_path(g)
      seq = build_sequence(path, g)
      message = f"Test 1 Example {i}"
      test_and_print_message(seq, seq_truth, k, message) 
    except Exception as e:
      sys.stderr.write(f"ERROR: {e}\n")
      return


def test_2(method):
  print("\033[33m{}\033[0m".format("Test 2"))
  print("\033[33m{}\033[0m".format("======"))
  seq_truth = random_DNA_sequence()
  k = 10
  kmers = get_kmers(seq_truth, k)
  try:
      seq = assemble_kmers(kmers, method)
      test_and_print_message(seq, seq_truth, k, "Test 2")
  except Exception as e:
      print(e)

def test_3(method):
  print("\033[33m{}\033[0m".format("Test 3"))
  print("\033[33m{}\033[0m".format("======"))
  seq_truth = random_DNA_sequence(15, 15)
  k = 4
  print("Sequence:", seq_truth)
  kmers = get_kmers(seq_truth, k)
  print("kmers:")
  for kmer in kmers:
      print(kmer)
  try:
      seq = assemble_kmers(kmers, method, "deBruijn.dot")
      test_and_print_message(seq, seq_truth, k, "Test 3")
  except Exception as e:
      print(e)

def generate_chart(method):
  print()
  print("\033[33m{}\033[0m".format("Output for report"))
  print("\033[33m{}\033[0m".format("=================="))
  ks = [3, 5, 7, 9, 11, 13, 15, 17, 19]
  seqs_truth = [
    random_DNA_sequence(100, 500),
    random_DNA_sequence(100, 1000),
    random_DNA_sequence(1000, 2000),
    random_DNA_sequence(1000, 3000),
    random_DNA_sequence(1000, 4000),
    random_DNA_sequence(1000, 5000),
    random_DNA_sequence(1000, 6000),
    random_DNA_sequence(1000, 7000),
    random_DNA_sequence(1000, 8000)
  ]

  run_times = []
  for i in range(len(seqs_truth)):
    seq_truth = seqs_truth[i]
    k = ks[i]
    kmers = get_kmers(seq_truth, k, True)
    g = DiGraph()
    begin = timer()
    if method == "k-mer pairwise comparison":
      g = create_deBruijn_graph_by_string_comp(kmers, g)
    elif method == "k-mer hashing":
      g = create_deBruijn_graph_by_hashing(kmers, g)
    else:
      sys.stderr.write("ERROR: unknown method!\n")
      return
    end = timer()
    elapsed_secs = round((end - begin) * 1000, 3)
    run_times.append(elapsed_secs)

  data = {'k':ks,'run_time':run_times}
  df = pd.DataFrame(data)
  sns.lineplot(data=df, x='k', y='run_time')
  plt.xlabel('K')
  plt.ylabel('Run Time (secs)')
  plt.title('Method: ' + method.upper())
  png_file_name = method.lower().replace(" ", "-")
  plt.savefig("../docs/images/" + png_file_name + '.png')
  print("Report plots have been generated in /docs/images folder...\n")

  print("|Language|Method|K-length|Run time (secs)|")
  print("|:----:|:----:|:---:|:-----:|")
  for i in range(0,len(ks)):
    print("|Python|",method,"|",ks[i],"|",run_times[i])

  
def test_seq_assembly():
  methods = [
    "k-mer pairwise comparison",
    "k-mer hashing"
  ]
  for method in methods:
    print()
    test_1(method)
    print()
    test_2(method)
    print()
  test_3("k-mer hashing")

  for method in methods:
    generate_chart(method)


```

We have stated in this block the tests because they are a translation of what we had in the C++ skeleton for this project. We have added a function to plot a chart where we show the run time comparison between methods, and also its detail in tables.

```python

from pyllist import dllist

class Node:
  
  def __init__(self, label: str):
    self.m_label = label
    self.m_outgoing = dllist()
    self.m_num_of_incoming = 0

  def print(self):
    print("  ",self.m_label)
    print("   incoming: ",str(self.m_num_of_incoming))
    print("     edges: ",self.m_outgoing)
    
class DiGraph:

  def __init__(self):
    self.m_nodes = []

  def print(self):
    print("---------------------------------------")
    print(" DiGraph ", len(self.m_nodes), " nodes")
    for node in self.m_nodes:
      node.print()
    print("---------------------------------------")

  def textRepresentation(self, hide_labels = True):
    answer = ""
    for i in range(0, len(self.m_nodes)):
      node = self.m_nodes[i]
      if hide_labels:
        answer += str(i) + ' -> '
      else:
        answer += str(i) + '(' + node.m_label + ')' + ' -> '
      elems = list(node.m_outgoing)
      edges = []
      for elem in elems:
        if elem is not None:
          edges.append(str(elem))
      answer += ','.join(edges)
      answer += '\n'
    return answer

```

As task 2 in this project requires, these classes, DiGraph and Node together, implement a de Bruijn graph to represent k-mers and its relationships by a directed graph. In our case, we decided to use a double linked list (dllist) to represent the secuence of edges from a node. This decision was good not only in terms of run time efficiency but also sometimes since, for example, in the construction of the Eulerian path we could traverse bothways. Also, we have added auxiliary methods to print the information or to represent the graph in its classi text representation. These classes are stable.

```python

from typing import List
from pyllist import dllist
from DiGraph import DiGraph, Node

def create_deBruijn_graph_by_string_comp(kmers: List[str], g: DiGraph):
  
  nodes = dllist()

  for kmer in kmers:
    k = len(kmer)

    prefix = kmer[0:k-1]

    itr = nodes.first
    i = 0
    while itr is not None:
      if itr.value.m_label == prefix:
        break
      itr = itr.next
      i += 1

    if itr is None:
      from_node = Node(prefix)
      from_node.m_num_of_incoming = 0
      nodes.append(from_node)
      itr = nodes.last

    from_itr = itr

    suffix = kmer[1:k]

    itr = nodes.first
    j = 0
    while itr is not None:
      if itr.value.m_label == suffix:
        break
      itr = itr.next
      j += 1

    if itr is None:
      to_node = Node(suffix)
      to_node.m_num_of_incoming = 0

      nodes.append(to_node)

      itr = nodes.last

    to_itr = itr

    from_itr.value.m_outgoing.append(j)
    to_itr.value.m_num_of_incoming += 1

  g.m_nodes = [node for node in nodes]
  return g

```
This is the translation we have produced in Python for the explicit function to create the de Brujin graph by k-mer string pairwise comparison. As we wil see later, this function has a quadratic behavior in terms of run time. This function is stable.

```python

class DNAHasher:
  def __call__(self, seq: str) -> int:
    val = 0
    max_width = 20
    for i in range(min(len(seq), max_width)):
      val = val << 2
      c = seq[i].lower()
      if c == 'a':
        val += 0
      elif c == 'c':
        val += 1
      elif c == 'g':
        val += 2
      elif c == 't':
        val += 3
      else:
        raise ValueError(f"Invalid base at position {i}: {seq[i]}")
    return val

class CSeqHash:
    def __init__(self):
        self.ht = defaultdict(dllist)

    def insert(self, key, value):
        self.ht[key].appendright(value)

    def find(self, key):
        return self.ht.get(key, None)

def create_hash_table(kmers: List[str]) -> CSeqHash:
    ht = CSeqHash()
    node_id = 0 
    for kmer in kmers:
        for j in range(2):  # j=0: prefix; j=1: suffix
            key = kmer[j:len(kmer)-1]
            if not ht.find(key):
                ht.insert(key, node_id)
                node_id += 1
    return ht

def create_deBruijn_graph_by_hashing(kmers: List[str], g: DiGraph):
    
    seq_hash = CSeqHash()

    node_id = {}

    # for each k-mer
    for kmer in kmers:
        kmer_len = len(kmer)
        prefix = kmer[0:kmer_len-1]
        suffix = kmer[1:kmer_len]

        # hash the prefix and suffix strings to get unique integer ids
        prefix_id = DNAHasher()(prefix)
        suffix_id = DNAHasher()(suffix)

        # find the prefix node id from the hash table
        if prefix_id in node_id:
            from_id = node_id[prefix_id]
        else:
            # create a new node and add it to the graph and node_id dict
            from_node = Node(prefix)
            g.m_nodes.append(from_node)
            node_id[prefix_id] = len(g.m_nodes) - 1
            from_id = node_id[prefix_id]
            # insert the new node into the hash table
            seq_hash.insert(prefix_id, from_id)

        # update node from_id's label to prefix if necessary
        if g.m_nodes[from_id].m_label != prefix:
            g.m_nodes[from_id].m_label = prefix

        # find the suffix node id to_id from the hash table
        if suffix_id in node_id:
            to_id = node_id[suffix_id]
        else:
            # create a new node and add it to the graph and node_id dict
            to_node = Node(suffix)
            g.m_nodes.append(to_node)
            node_id[suffix_id] = len(g.m_nodes) - 1
            to_id = node_id[suffix_id]
            # insert the new node into the hash table
            seq_hash.insert(suffix_id, to_id)

        # update node to_id's label to suffix if necessary
        if g.m_nodes[to_id].m_label != suffix:
            g.m_nodes[to_id].m_label = suffix

        # create a new edge (from_id, to_id) by inserting node to_id into the adjaceny list of node from_id
        g.m_nodes[from_id].m_outgoing.appendright(to_id)

        # update the number of incoming edges of node to_id
        g.m_nodes[to_id].m_num_of_incoming += 1
    
    # end for loop
    return g

```

Here, we state the function we have programmed to generate a random sequence DNA. Here is a screenshot for that:

![Figure 1: Screenshot of our DNAHasher behavior](images/dna_gen.png){#q_23}

Also, we have programmed the create_deBruijn_graph_by_hashing that basically receiving the graph and the list of kmers using appropiate the keys, produces hashes (generating the hash the prefix and suffix strings to get unique integer ids) so that the execution of the creation of the de Brujin graph is in linear time. These functions are stable.

```python

from random import randint
from copy import deepcopy

def CreateAdjacencyList2(g_text_rep):
    
    adj_list = {}
    circuit_max = 0
    lines = [line.strip() for line in g_text_rep.splitlines()]
    for line in lines:
        node = line.strip('\n')
        node = node.replace(' -> ', ' ')
        node = node.split(' ')
        adj_list.setdefault(node[0], [])
        for number in node[1].split(','):
            adj_list[node[0]].append(number)
            circuit_max += 1
    
    return adj_list, circuit_max


def FindEulerianCycle(adj_list, circuit_max):

    #Reduced adjacency list to keep track of traveled edges   
    red_adj_list = {}            
    red_adj_list = deepcopy(adj_list)            
            
    #Arbitrary starting point (if graph is directed/balanced)
    start = '0'
    curr_vrtx = '0'

    stack = []
    circuit = []    
    while len(circuit) != circuit_max:
        
        if red_adj_list[curr_vrtx] != []: #If neighbors exist
            stack.append(curr_vrtx)
            pick = randint(0,len(red_adj_list[curr_vrtx])-1)
            temp = deepcopy(curr_vrtx)
            curr_vrtx = red_adj_list[temp][pick]
            red_adj_list[temp].remove(curr_vrtx)
        
        else:
            circuit.append(curr_vrtx)
            curr_vrtx = stack[len(stack)-1]
            stack.pop()

    #Formatting
    path_array = [int(start)]
    path = start + '->'
    for vrtx in circuit[::-1]:
        path += (vrtx + '->')
        path_array.append(int(vrtx))
    
    return path_array

```

After testing many strategies spending many days of effort, this is our last implementation of a class that produces an Eulerian Cycle based on an adjacency list to work only with nodes ids (not labels). It does it job great part of the time but it has a known issue we will explain later.

```python

from collections import defaultdict
from typing import List
from pyllist import dllist
from DiGraph import DiGraph, Node
from random import choice
from EulerianCycle import CreateAdjacencyList2, FindEulerianCycle

def source(g:DiGraph):
  for i, node in enumerate(g.m_nodes):
    if len(node.m_outgoing) == node.m_num_of_incoming + 1:
      return i
  return 0

def sink(g:DiGraph):
  for i, node in enumerate(g.m_nodes):
    if len(node.m_outgoing) + 1 == node.m_num_of_incoming:
      return i
  return 0

def has_Eulerian_path(g:DiGraph):
  exist = True
  numSources, numSinks = 0, 0
  for node in g.m_nodes:
    out, incoming = len(node.m_outgoing), node.m_num_of_incoming
    if out == incoming: # check for intermediate balanced node
      continue
    elif out == incoming + 1: # check for source node
      numSources += 1
      if numSources > 1:
        exist = False
        break
    elif out + 1 == incoming: # check for sink node
      numSinks += 1
      if numSinks > 1:
        exist = False
        break
    else:
      exist = False
      break
  return exist

def find_Eulerian_cycle(g: DiGraph) -> dllist:
    cycle_labels, cycle_values = dllist(), dllist()
    adj_list, circuit_max = CreateAdjacencyList2(g.textRepresentation())
    path = FindEulerianCycle(adj_list, circuit_max)
    for index in path:
      cycle_labels.append(g.m_nodes[index].m_label)
      cycle_values.append(index)
    return cycle_labels, cycle_values


def find_Eulerian_path(g: DiGraph) -> dllist:
  path, cycle = dllist(), dllist()
  
  src = source(g)
  dest = sink(g)
  src = 0 if src >= len(g.m_nodes) else src
  dest = 0 if dest >= len(g.m_nodes) else dest

  nodes = g.m_nodes
  nodes[dest].m_outgoing.append(src)
  nodes[src].m_num_of_incoming += 1
  g.m_nodes = nodes

  cycle_labels, cycle = find_Eulerian_cycle(g) 
  cycle.pop()
  cycle_labels.pop()
  
  src_times = 0
  for id in cycle:
    if id == src:
      src_times += 1
 
  first_part = []
  count = 1
  cur_first_part = cycle.first
  while cur_first_part.next is not None:
    if count == src_times and cur_first_part.value == src:
      break
    if cur_first_part.value == src:
      count += 1
    first_part.append(cur_first_part.value)
    cur_first_part = cur_first_part.next

  cur_last_part = cycle.last
  last_part = []
  while cur_last_part.value != src:
    last_part.append(cur_last_part.value)
    cur_last_part = cur_last_part.prev
  
  path_ids = [src] 
  if last_part is not None:
    path_ids += last_part[::-1]
  if first_part is not None:
    path_ids += first_part
  
  path = dllist()
  if len(path_ids) > 0:
    for id in path_ids:
      path.append(g.m_nodes[id].m_label)
  else:
    path.append(src)

  return path

```

Here, there are the functions to detect the presence of a Eulerian cycle given an Eulerian Cycle, and based on our representation of the de Brujing directed graph, produces a Eulerian path. The behavior of these functions are stable.

```python

from typing import List
from pyllist import dllist
from DiGraph import DiGraph, Node
from deBrujinByString import create_deBruijn_graph_by_string_comp
from deBrujinByHash import create_deBruijn_graph_by_hashing
from EulerPath import has_Eulerian_path, find_Eulerian_path

def dllist_index(my_list, elem):
    index = 0
    current_node = my_list.first
    while current_node is not None:
        if current_node.value == elem:
            break
        current_node = current_node.next
        index += 1
    return index

def build_sequence(path: dllist, g: DiGraph) -> str:
    k = len(path.first.value) + 1
    seq = path.first.value[:k-1]
    pos = path.first.next
    while pos != path.last:
        seq += pos.value[-1]
        pos = pos.next
    seq += path.last.value[-1]
    return seq

def assemble_kmers(kmers, method, dotfile=None):
    seq = ""
    g = DiGraph()
    if method == "k-mer pairwise comparison":
        create_deBruijn_graph_by_string_comp(kmers, g)
    elif method == "k-mer hashing":
        create_deBruijn_graph_by_hashing(kmers, g)
    else:
        raise ValueError("ERROR: unknown methods!")
    if dotfile:
        printDOTFile(g, dotfile)
    if not has_Eulerian_path(g):
        raise ValueError("ERROR: Eulerian path does not exist!")
    else:
        path = find_Eulerian_path(g)
        seq = build_sequence(path, g)
    return seq

def printDOTFile(g, file):
    with open(file, 'w') as ofs:
        ofs.write("digraph {\n")
        ofs.write("label=\"de Bruijn graph\"\n")
        nodes = g.m_nodes
        for node in nodes:
            for to in node.m_outgoing:
                prefix = node.m_label
                suffix = nodes[to].m_label
                ofs.write(f"{prefix}->{suffix}[label={prefix}{suffix[-1]}];\n")
        ofs.write("}\n")

```

Here we have programmed in Python the functions the skeleton offers to finally build the sequence and assemble kmers. Also, the function to generate the deBrujin.dot persistence file. These functions are stable.

```python

import random

def random_DNA_sequence(min_length=10, max_length=10000):
  length = random.randint(min_length, max_length)
  DNA = ''.join(random.choice('atgc') for _ in range(length))
  return DNA

def get_kmers(seq, k, randomized=True):
  kmers = [seq[i:i+k] for i in range(len(seq) - k + 1)]
  if randomized:
    randomized_kmers = list(kmers)
    nkmers = len(kmers)
    for i in range(nkmers - 1):
      j = random.randint(i, nkmers - 1)
      randomized_kmers[i], randomized_kmers[j] = randomized_kmers[j], randomized_kmers[i]
    return randomized_kmers
  else:
    return kmers

def compare_composition(s1: str, s2: str, k: int) -> bool:
  same_composition = True
  
  if len(s1) != len(s2):
    same_composition = False
  elif s1 == s2:
    same_composition = True
  else:
    composition1 = get_kmers(s1, k)
    composition1.sort()
    composition2 = get_kmers(s2, k)
    composition2.sort()
    same_composition = composition1 == composition2
      
  return same_composition

```

Finally, we state in our project the functions to generate the random DNA sequence, get kmers given a sequence and a length for k, and the function that inspects if two kmers have the same composition. These functions are stable.

## How to compile and run project's code

### Python

To run the `main.py` program correctly. the following are the steps are required

* Unzip this project on a path where Python 3.8 or superior is active
* Open a console and go to where the unzipped folder is. Make sure you are in the same level where the `main.py` program is. You can be sure of this printing the directory content with `ls` command
* Run the program with the command `py main.py`
* The program will produce a similar output we have in this report, and also plots, and tables the following sections has in its analysis.

# Results

## Screenshot of the required test cases

This is an example of execution of our main program:

```

PS C:\Development\nmsu\nmsu-cs516-bioinformatics-project\ps02\python> py .\main.py

Test 1
======
Testing k-assembler by k-mer pairwise comparison

Example 0:
Elapsed time for building de Bruijn graph: 0.025
Passed test for existence of Eulerian path. Congratulations!
Passed Test 1 Example 0 (assembled original sequence). Congratulations!

Example 1:
Elapsed time for building de Bruijn graph: 0.035
Passed test for existence of Eulerian path. Congratulations!
Passed Test 1 Example 1 (assembled a sequence of the same composition with the original sequence). Congratulations!

Example 2:
Elapsed time for building de Bruijn graph: 0.036
Passed test for existence of Eulerian path. Congratulations!
Passed Test 1 Example 2 (assembled a sequence of the same composition with the original sequence). Congratulations!

Example 3:
Elapsed time for building de Bruijn graph: 66510.974
Passed test for existence of Eulerian path. Congratulations!
Passed Test 1 Example 3 (assembled original sequence). Congratulations!

Test 2
======
Passed Test 2 (assembled a sequence of the same composition with the original sequence). Congratulations!


Test 1
======
Testing k-assembler by k-mer hashing

Example 0:
Elapsed time for building de Bruijn graph: 0.044
Passed test for existence of Eulerian path. Congratulations!
Passed Test 1 Example 0 (assembled original sequence). Congratulations!

Example 1:
Elapsed time for building de Bruijn graph: 0.05
Passed test for existence of Eulerian path. Congratulations!
Passed Test 1 Example 1 (assembled a sequence of the same composition with the original sequence). Congratulations!

Example 2:
Elapsed time for building de Bruijn graph: 0.053
Passed test for existence of Eulerian path. Congratulations!
Passed Test 1 Example 2 (assembled a sequence of the same composition with the original sequence). Congratulations!

Example 3:
Elapsed time for building de Bruijn graph: 208.865
Passed test for existence of Eulerian path. Congratulations!
Passed Test 1 Example 3 (assembled original sequence). Congratulations!

Test 2
======
Passed Test 2 (assembled a sequence of the same composition with the original sequence). Congratulations!

Test 3
======
Sequence: gtccaccacccagct
kmers:
gtcc
cacc
ccca
ccac
tcca
cacc
acca
ccac
agct
cagc
ccag
accc
Passed Test 3 (assembled a sequence of the same composition with the original sequence). Congratulations!

```

Important note: This execution is flawless. The current version (Tue 28 mar) makes a good but a not a perfect job. Having fixed some important issues to get this level of results now, there is a last issue finding a correct Eulerian Cyle when there are repetitions of nodes. In that case, not always produce a good cycle. In future version, we should fix that issue.

## The k-assembler run time as a function of the number of k-mers

### Results for k-assembler by k-mer pairwise comparison

![Figure 2: Run time of kmer hassembler by pairwise comparison](images/k-mer-pairwise-comparison.png){#q_25}

In this chart, we clearly see that the run time is considerable when we use this method to assemble. The evolution has a quadratic pattern.

|Language|Method|K-length|Run time (secs)|
|:----:|:----:|:---:|:-----:|
|Python| k-mer pairwise comparison | 3 | 1.21
|Python| k-mer pairwise comparison | 5 | 22.572
|Python| k-mer pairwise comparison | 7 | 279.383
|Python| k-mer pairwise comparison | 9 | 846.541
|Python| k-mer pairwise comparison | 11 | 2575.83
|Python| k-mer pairwise comparison | 13 | 1041.696
|Python| k-mer pairwise comparison | 15 | **227.039**
|Python| k-mer pairwise comparison | 17 | 1473.353
|Python| k-mer pairwise comparison | 19 | 1633.571

In this table we can see the exact values for run time each execution had in Python for the method **k-mer pairwise comparison**. For instance, with 3-mers, we obtain 1.21 seconds; with 9-mers, we obtain 846.541 seconds; for 17-mers, we obtain 1473.353 seconds; *interestingly, with the combination of 15-mers, we obtain much less, 227.039 seconds, just to mention some examples this table shows*.

### Results for k-assembler by k-mer hashing

![Figure 3: Run time of kmer assembler by hashing](images/k-mer-hashing.png){#q_50}

In this chart, we clearly see that the run time is much less when we use this method to assemble. The evolution has a linear pattern (orange line). Also, to compare the proportions, we have put also the previous method so that we can appreciate the efficiency this algorithm brings.

|Language|Method|K-length|Run time (secs)|
|:----:|:----:|:---:|:-----:|
|Python| k-mer hashing | 3 | 1.363
|Python| k-mer hashing | 5 | 3.47
|Python| k-mer hashing | 7 | 10.037
|Python| k-mer hashing | 9 | 18.316
|Python| k-mer hashing | 11 | 10.426
|Python| k-mer hashing | 13 | 14.582
|Python| k-mer hashing | 15 | 22.92
|Python| k-mer hashing | 17 | 59.468
|Python| k-mer hashing | 19 | 58.216

In this table we can see the exact values for run time each execution had in Python for the method **k-mer hashing**. For instance, with 3-mers, we obtain 1.363 seconds which is higher than the less-efficiet method -this is correct since for low amount of data to process, a quadratic function in complexity is more efficient than a linear one-; with 9-mers, we obtain 18.316 seconds (which represent an improvement in 13 times agains the previous method); for 17-mers, we obtain 59.468 seconds (24 times better), just to mention some examples this table shows.

# Discussion

This project has been so ilustrative not only because it has challenge our technical ability to translate code from C++ to Python,, but also and more important than this is that it has clarified in a very important way the following conclusions our data supports:

* When using sequence comparison, the run time of k-assembler is proportional to the product of the number of k-mers and the length of the k-mer (complexity is quadratic). This is because the algorithm needs to compare each k-mer with every other k-mer in the dataset.

* When using hashing, the run time of k-assembler is proportional to the number of k-mers (complexity is linear). This is because the algorithm needs to add each k-mer to a hash table, which can be done in constant time per k-mer. Once all k-mers have been added to the hash table, the algorithm needs to check each k-mer to see if it has a corresponding reverse complement in the hash table, which again can be done in constant time per k-mer.

* For both methods, the value of k has a significant impact on the run time of k-assembler. Larger values of k lead to longer k-mers, which in turn lead to fewer k-mers and faster run times. However, larger values of k also increase the likelihood of errors in the assembly due to repeated regions in the genome. Therefore, there is a trade-off between run time and assembly accuracy when choosing the value of k.

As last words, we can say that this project was intense for us. It required more effort since we decided to follow the skeleton in C++ but translating it to Python. Then, we run the extra mile in that sense. However, it was a great experience and we are grateful for having had it as part of our academic formation. 

# Distribution of work among team members

Israel Gonzalez:

- Complete translation of C++ skeleton into Python
- Development of required solution
- Visualization of run time versus the number of k-mers using Seaborn
- Report writing

Gabriel Romero:

- Compilation and run in C++ of skeleton