---
title: "Frequent k-mers in the SARS-CoV-2 Genome"
subtitle: "CS516 Bioinformatics - Project 1"
author: "Israel Gonzalez S., Gabriel Romero"
date: "February 22, 2023"
toc: true
format:
  html:
    html-math-method: katex
    code-tools: true
    self-contained: true
execute:
  warning: false
---
# Abstract
Write here the abstract

# Introduction
Write here the intro

# Methods
We proceed in this section to describe the methods we have implemented in the Python class FrequentKmers and the way they can be used in an executable Python file main.py

## Methods code
The methods are organized in the way each task required. First, we have the methods related to Tasks 1 and Task 2 that require to code the pseudo code we have in *Bioinformatics Algorithmsâ€“An Active Learning Approach, 3rd Edition*.

```python
# Frequent Words Algorithm methods:
  def frequent_words(self, text, k):
    start = timer()
    frequent_words = []
    n = len(text)
    count_array = np.zeros(n - k + 1)
    for i in range(n - k + 1):
      pattern = text[i:i+k]
      count_array[i] = self.pattern_count(text, pattern)
    for i in self.max_array(count_array):
      frequent_words.append(text[i:i+k])
    frequent_words = self.remove_duplicates(frequent_words)
    end = timer()
    return [frequent_words,  round((end - start) * 1000, 3)]
  
  def pattern_count(self, text, pattern):
    count = 0
    for i in range(len(text) - len(pattern) + 1):
      if text[i:i+len(pattern)] == pattern:
        count += 1
    return count
  
  def remove_duplicates(self, arr):
    answer = []
    for item in arr:
      if item not in answer:
        answer.append(item)
    return answer

  def max_array(self, arr):
    max_val = max(arr)
    max_indices = [i for i, val in enumerate(arr) if val == max_val]
    return max_indices
```

The `FrequentKmers.frequent_words` method takes as parameters `text` and `k` representing the DNA sequence and the length of k-mer respectively. Taking text slices of length k, we coun the frequency of each k-mer using `FrequentKmers.pattern_count` method. After counting them, we determine the k-mers with a maximum frequency count using `FrequentKmers.max_array` and filter them in a unique list without repetitions using `FrequentKmers.remove_duplicates`

Complete

## Exection of program
Explain

# Results
Write here

# Discussion
Write here

# Distribution of work
Write here

# References
Write here

# Your notes (legacy to delete)

For this project our first two tasks where to implement two algorithms to find Frequent
k-mers in the SARS-CoV-2 Genome.  For these algorithms we were using a string text of
ACGTTTCACGTTTTACGG with a kmer length of 3.  The first algorithm was based on the PatternCount method.
First we began with pseudocode for the pattern count method:
PatternCount(Text, Pattern)
    count <- 0
    for i <- 0 to |text| - |pattern|
        if text(i, |pattern|) = pattern
            count <- count + 1
        return count

When putting this method into python we simply set the count to 0, and used a for loop
to subtract the 3mer patterns from the entire string length of the genome.

Straightforwardly to find the most frequent kmers in a string text, we generated an array
called frequent_words that held the genome sequence. Next in the method we generated a 
count array that stores the count and pattern of the 3-mers.
|Text| - k + 1

